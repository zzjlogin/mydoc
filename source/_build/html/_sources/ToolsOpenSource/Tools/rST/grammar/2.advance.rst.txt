==========
高级语法
==========


表格学习
===============
表格主要包括：

1. 简单表格。
#. 网格。
#. 还可以通过外部文件引入表格。

正式的表格比reStructuredText语法所提供的需要更多结构。
表格可以使用 :ref:`表格 <dtr-table>` 指令指定标题。
有时reStructuredText表格不方便书写，或表格数据不是随手可得的标准格式。 :ref:`csv表格 <dt-csv-table>` 指令支持CSV数据。

.. _dt-table:

表格
------

:Directive Type: "table"
:Doctree Element: :ref:`表格 <dtr-table>`
:Directive Arguments: 1, optional (table title).
:Directive Options: `:class:`_, `:name:`_
:Directive Content: 一个普通的reStructuredText表格

(Docutils 0.3.1 新增)

表格指令用于创建一个带标题的表格，需要将标题关联到表格::

    .. table:: Truth table for "not"

       =====  =====
         A    not A
       =====  =====
       False  True
       True   False
       =====  =====


.. _dt-csv-table:

CSV Table
------------

:Directive Type: "csv-table"
:Doctree Element:  :ref:`表格 <dtr-table>`
:Directive Arguments: 1, optional (table title).
:Directive Options: Possible (see below).
:Directive Content: A CSV (comma-separated values) table.

.. WARNING::

   一个CSV(逗号分隔的值)表格

.. WARNING::

   "csv-table"指令的 ":file:" 和 ":url:" 选项表示一个潜在的安全漏洞。其可以使用":ref:`file_insertion_enabled <cfg-file-insertion-enabled>`" 运行时设置禁用。

(Docutils 0.3.4 新增)

"csv-table"指令用于通过CSV数据创建一个表格。CSV是一种由电子表格应用程序和树叶数据库生成的通用数据格式。数据可能是内部的(文件的一个组成部分)，也可能是外部的(一个单独的文件)。

举例::

    .. csv-table:: Frozen Delights!
       :header: "Treat", "Quantity", "Description"
       :widths: 15, 10, 30

       "Albatross", 2.99, "On a stick!"
       "Crunchy Frog", 1.49, "If we took the bones out, it wouldn't be
       crunchy, now would it?"
       "Gannet Ripple", 1.99, "On a stick!"

支持单元格内的块标记和行内标记。单元格内的行结束符能被识别

工作限制:

* 没有提供对各行的列数是否一致的检查。但该指令通过自动添加空条目
  支持不会在短行之后插入空条目的CSV生成器

  .. 添加 "strict" 选项来验证输入?

.. [#whitespace-delim] 空白分隔符只对外部CSV文件起效

.. [#ASCII-char] 在Python 2中， ``delimiter``、 ``quote`` 
   和 ``escape`` 选项必须为ASCII字符。(csv模块不支持Unicode和所有
   非ASCII字符，即使被编码为utf-8的字符串)。该限制在Python3中不存在。

下列选项可以被识别:

``widths`` : 整型 [, 整型...]
    一个逗号或空格分隔的相对列宽列表。默认等分

``header-rows`` : 整型
    表头所使用的CSV数据的行数。默认为0

``stub-columns`` : 整型
    用作行标题的列数。默认为0

``header`` : CSV数据
    为表格标题补充数据，从主CSV数据中添加独立且在其他任何之前的 ``标题行`` 。必须使用与主CSV数据相同的CSV格式。

``file`` : string (newlines removed)
    CSV数据文件的本地文件系统路径

``url`` : string (whitespace removed)
    指向一个CSV数据文件的网络URL引用

``encoding`` : name of text encoding
    扩展CSV数据(文件或URL)的文本编码。默认与文档编码相同(如果指定了)

``delim`` : char | "tab" | "space" [#whitespace-delim]_
    一个单字符字符串\ [#ASCII-char]_ 用于分隔字段。默认为 ``,`` (逗号)。可以指定为一个Unicode代码点。阅读 :ref:`unicode <dt-unicode>` 指令以获取语法细节

``keepspace`` : flag
    保留分隔符后的空格。默认忽略

``escape`` : char
    一个单字符字符串\ [#ASCII-char]_ 用于转义分隔符或引用字符。
    可以指定为一个Unicode代码点。阅读 :ref:`unicode <dt-unicode>` 指令以获取语法细节。
    默认为重复该字符，如"He said, ""Hi!"""

    .. 添加另一个可能的值, "double", 以显式表名默认例子?

也可以识别通用选项 `:class:`_ 和 `:name:`_.

.. _dt-list-table:

列表表格
------------

:Directive Type: "list-table"
:Doctree Element: :ref:`表格 <dtr-table>`
:Directive Arguments: 1, optional (table title).
:Directive Options: Possible (see below).
:Directive Content: 一个统一的两层无序列表

(Docutils 0.3.8. 新增。只是一个初始实现， `更多想法`__ 将来可能会实现)

__ ../../dev/rst/alternatives.html#list-driven-tables

"list-table"指令用于从统一的两层无需列表中的数据创建一个表格。"统一"意味着每个子列表(二级列表)必须包含相同数量的列表项。

例子::

    .. list-table:: Frozen Delights!
       :widths: 15 10 30
       :header-rows: 1

       * - Treat
         - Quantity
         - Description
       * - Albatross
         - 2.99
         - On a stick!
       * - Crunchy Frog
         - 1.49
         - If we took the bones out, it wouldn't be
           crunchy, now would it?
       * - Gannet Ripple
         - 1.99
         - On a stick!

下列选项可以被识别:

``widths`` : 整型 [整型...]
    一个逗号或空格分隔的相对列宽列表。默认等分。

``header-rows`` : 整型
    表头所使用的CSV数据的行数。默认为0

``stub-columns`` : 整型
    用作行标题的列数。默认为0

也可以识别通用选项 `:class:`_ 和 `:name:`_.

.. _dt-document-parts:




脚注引用学习
===============

脚注
-----------

脚注分为按照默认顺序的脚注和指定顺序的脚注。

**样例展示：**

----

[1]_ 是指向脚注1的引用，[2]_ 是指向脚注2的引用

.. [1] 这是脚注 1.
.. [2] 这是脚注 2.
.. [3] 这是脚注 3.

[3]_ 这是指向脚注3的引用


**上面换行功能实现方法，以下是rST源码显示样例**::

    [1]_ 是指向脚注1的引用，[2]_ 是指向脚注2的引用

    .. [1] 这是脚注 1.
    .. [2] 这是脚注 2.
    .. [3] 这是脚注 3.

    [3]_ 这是指向脚注3的引用

一个星号(“*”)可以用于需要自动符号生成脚注标签。星号可以是标 签中的单个字符

.. tip::

    上面脚注用的是[1]，可以用[#1]，加了#以后会自动排序并且不会重复。这样方便使用。但是这时候1的序号可能就不是1了而是自动的排序但是顺序是按照指定的顺序。

**样例展示：**

----

只是一个*符号脚注引用: [*]_ 。

.. [*] 这是脚注。

**上面换行功能实现方法，以下是rST源码显示样例**::

    只是一个*符号脚注引用: [*]_ 。

    .. [*] 这是脚注。

----

内部链接：

**样例展示：**

----

.. _my1-reference-label:

这是标题(后面会索引上面的标记然后找到这个标题)
-------------------------------------------

This is the text of the section.

It refers to the section itself, see :ref:`my1-reference-label`.

**上面换行功能实现方法，以下是rST源码显示样例**::

    .. _my1-reference-label:

    这是标题(后面会索引上面的标记然后找到这个标题)
    -------------------------------------------

    This is the text of the section.

    It refers to the section itself, see :ref:`my1-reference-label`.

----

引用
-----------

**样例展示：**

----

这是一个引文引用: [CIT2002]_.

.. [CIT2002] 这是引文。除标签文本外，它类似于脚注。

**上面换行功能实现方法，以下是rST源码显示样例**::

    这是一个引文引用: [CIT2002]_.

    .. [CIT2002] 这是引文。除标签文本外，它类似于脚注。

替换学习
=============

.. |name| replace:: replacement *text*
或这个：

.. |caution| image:: warning.png
             :alt: Warning!

源文件::
        
        .. |name| replace:: replacement *text*
    或这个：

        .. |caution| image:: warning.png
                    :alt: Warning!

链接和学习
===============

链接分为显式链接、隐式链接、间接链接

显示链接
--------


**样例展示：**

----

显示链接测试百度链接：baidu_biaoqian_。

.. _baidu_biaoqian: https://www.baidu.com

**上面换行功能实现方法，以下是rST源码显示样例**::

    显示链接测试百度链接：baidu_biaoqian_。

    .. _baidu_biaoqian: https://www.baidu.com

    实际等效于HTML的：
    显示链接测试百度链接：<a href="https://www.baidu.com">baidu_biaoqian</a>。

想要学习 `我最喜欢的编程语言`_ ?

.. _我最喜欢的编程语言: http://www.python.org


- `A HYPERLINK`_
- `a   hyperlink`_
- `A  Hyperlink`_

.. _A HYPERLINK:


隐式链接
--------

.. __: anonymous-hyperlink-target-link-block

上面是隐式超链接






内部超链接目标可以是链式的。多个临近的内部超链接目标全
部指向同一个元素::

.. _target1:
.. _target2:
    目标"target1"和"target2"是同义词；它们同时指向这一段。

如果元素所"指向"的是一个扩展超链接目标(其行块中有一个URI。
见#2)从扩展超链接目标传播到内部超链接目标，它们全都会"指向"
同一个URI。没必要重复一个URI。例如，下面三个超链接目标指向
同一个URI::

    .. _Python DOC-SIG mailing list archive:
    .. _archive:
    .. _Doc-SIG: http://mail.python.org/pipermail/doc-sig/








图片学习
===============

有两个图片指令: "image"和"figure"

图片
------

.. _dt-image:


:Directive Type: "image"
:Doctree Element: :ref:`图片 <dtr-image>`
:Directive Arguments: One, required (image URI).
:Directive Options: Possible.
:Directive Content: None.

一个"image"是一个简单的图片::

    .. image:: picture.png

.. hint::

    一般上面图片的“.. image:: picture.png”中的“picture.png”如果不在同一路径，都需要用绝对路径。即在图片名前面加一个“/”。


行内图片可以在 :ref:`替代定义 <rst-substitution-definitions>` 中使用"image"指令来定义。

图片源文件的URI在指令参数中确定。因为有超链接目标，图片URI可以与显式标记开始字符和目标名称在同一行开始，也可以在紧跟的缩进文本块中(中间没有空行)开始。如果连接块有多行，它们会被删除开始和结束的空格并合并到一起。

.. _dt-image-options:

可选的，图片链接块可以包含一个平面字段列表，图片选项。例如::

    .. image:: picture.jpeg
       :height: 100px
       :width: 200 px
       :scale: 50 %
       :alt: alternate text
       :align: right

下列选项可以被识别:

``alt`` : 文本
    替换文本: 当应用无法显示图片时，会显示图片的一个简短的描述或
    由应用为视觉受损的用户读出。

``height`` : :ref:`长度 <rst-length-units>`
    图片所需要的高。用于存储空间或比例尺图片的纵向。当"scale"也被
    指定了，它们会组合到一起。例如，一个高位200px且比例尺为50等
    价于高位100px且没有比例尺。

``width`` : 当前行宽度的 :ref:`长度 <rst-length-units>` 或 :ref:`百分比 <rst-percentage-units>`
    图片的宽度。用于存储空间或比例尺图片的横向类似"height"，当指定
    "scale"选项，则会被组合。

``scale`` : 整数百分比("%"符号是可选的)
    图片的统一缩放因子。默认"100%"，即无缩放。

    如果未指定高度和宽度选项，如果安装了 `Python图片库` (PIL)且图片有效，则其会被会用于决定它们。

``align`` : "top", "middle", "bottom", "left", "center", or "right"
    图片的对齐方式，等价于HTML的 ``<img>`` 标签的"align"属性。
    值"顶端"、"居中"、"底部"用于控制图片的纵向对齐(与文本基线关联)。它们只对行内图片(替代)有用。
    值"左"、"中"、"右"用于控制图片的横向对齐，允许图片漂浮，文字围绕
    图片。具体的行为取决于浏览器或用于渲染的软件。

``target`` : 文本(URI或引用名称)
    将图片变为超链接引用("可点击")。可选参数是一个URI(相对或绝对)，或一个包含下划线前缀的 :ref:`引用名称 <rst-reference-names>` 。


以及通用选项 `:class:` and `:name:`.

.. _dt-figure:

figure
------

:Directive Type: "figure"
:Doctree Elements: :ref:`dtr-figure`, :ref:`图片 <dtr-image>`, :ref:`标题 <dtr-caption>`, :ref:`铭文 <dtr-legend>`
:Directive Arguments: One, required (image URI).
:Directive Options: Possible.
:Directive Content: Interpreted as the figure caption and an optional
                    legend.

一个"figure"指令由 :ref:`图片 <dtr-image>` 数据(包含 :ref:`图片选项 <dt-image-options>`)和一个可选的标题(一个单行段落)和一个可选的铭文(任意正文元素)组成。对于基于页面输出的媒体，如果这对页面布局有帮助，figures可以浮动到一个不同的位置::

    .. figure:: picture.png
       :scale: 50 %
       :alt: map to buried treasure

       这是figure的标题(一个简单的段落)。

       铭文由标题后的所有元素组成。在本例中，其由本段和之后的表格组成:

       +-----------------------+-----------------------+
       | Symbol                | Meaning               |
       +=======================+=======================+
       | .. image:: tent.png   | Campground            |
       +-----------------------+-----------------------+
       | .. image:: waves.png  | Lake                  |
       +-----------------------+-----------------------+
       | .. image:: peak.png   | Mountain              |
       +-----------------------+-----------------------+

标题段落之前和铭文段落之前必须有空行。指定一个没有标题的铭文，在标题
的位置使用空注释("..")。

"figure"指令支持"image"指令的所有选项(见上述 :ref:`图片选项 <dt-image-options>` )。这些选项(除了"对齐")会被传递给图片。

``align`` : "left", "center", or "right"
    figure的横向对齐，允许图片浮动及文字围绕它。具体行为取决于浏览器
    或渲染它的软件。

另外，下列选项可以被识别:

``figwidth`` : "image", 当前行宽度的 :ref:`长度 <rst-length-units>` 或 :ref:`百分比 <rst-percentage-units>`
    figure的宽度。限制figure使用的横向空间。允许使用一个特殊的值
    "image"，此时使用所包含的图片的实际宽度(需要 `Python图片库`)。如果图片文件无法找到或需要的软件无法使用，该选项
    会被忽略。

    设置"figure"文档树元素的"width"属性。

    该选项不缩放包含的图片，需要使用"width"图片选项来缩放::

        +---------------------------+
        |        figure             |
        |                           |
        |<------ figwidth --------->|
        |                           |
        |  +---------------------+  |
        |  |     image           |  |
        |  |                     |  |
        |  |<--- width --------->|  |
        |  +---------------------+  |
        |                           |
        |The figure's caption should|
        |wrap at this width.        |
        +---------------------------+

``figclass`` : 文本
    在figure元素上设置一个 :ref:`"类" <dtr-classes>` 属性值。详见下面的 :ref:`类 <dt-class>` 指令。



It is methioned by [Ref]_ that C++ is good.



注释学习
===============

代码块学习
===============

.. [Ref] 《zzq's talk》

警告提示集合
===============

**警告/提示关键字包括11个：**::

    attention, caution, danger, error, hint, important, note, tip, warning, admonition, title

注意(note)
---------------

**样例展示：**

----

.. note::

    测试注意(note)。



**上面换行功能实现方法，以下是rST源码显示样例**::

    .. note::

        测试注意(note)。

----

提示/小技巧(tip)
---------------

**样例展示：**

----

.. tip::

    小技巧测试(tip)。

**上面换行功能实现方法，以下是rST源码显示样例**::

    .. tip::

        小技巧测试(tip)。

----

其他警告提示的关键字的作用方法和前两个相同。以下是其他关键字的显示结果。


.. warning::

    warning

.. attention::

    attention

.. caution::

    caution

.. error::

    error

.. important::

    important

.. hint::

    hint

.. danger::

    danger

.. admonition::

    admonition


各种关键字(角色)学习
====================

这一部分参考：http://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#ref-role


.. _my-advance-ref:
\:ref:
----------------

为了支持对任何文档中的任意位置的交叉引用，使用标准的reST标签。为此，标签名称在整个文档中必须是唯一的。您可以通过两种方式引用标签：

- 如果您在标题标题之前直接放置标签，则可以使用标签:ref:`label-name`。例如：

::

    .. _my-reference-label:

    Section to cross-reference
    --------------------------

    This is the text of the section.

It refers to the section itself, see :ref:\`my-reference-label`.
:ref:然后，该角色将生成指向该部分的链接，链接标题为“要交叉引用的部分”。当section和reference在不同的源文件中时，这也可以正常工作。

自动标签也适用于数字。例如：

::

    .. _my-figure:

    .. figure:: whatever

        Figure caption

在这种情况下，引用:ref:\`my-figure`将插入带有链接文本“图标题”的图形引用。

对于使用table指令给出显式标题的表，同样适用 。

仍未引用未放置在节标题之前的标签，但您必须使用以下语法为链接指定明确的标题： 。:ref:\`Link title <label-name>`

.. hint::

    参考标签必须以下划线开头。引用标签时，必须省略下划线（参见上面的示例）。

ref建议使用标准reStructuredText链接到部分（例如），因为它跨文件工作，当部分标题更改时，如果不正确则会引发警告，并适用于所有支持交叉引用的构建器。

\:doc:
----------------

链接到指定的文件; 文档名称可以绝对或相对方式指定。例如，如果引用 :doc:\`parrot`发生在文档中sketches/index，则链接引用sketches/parrot。如果引用是:doc:\`/people`或 :doc:\`../people`，则链接引用people。

如果没有给出明确的链接文本（如通常:) ，则链接标题将是给定文档的标题。:doc:\`Monty Python members </people>`

.. hint::

    版本0.6的新功能。

    还有一种方法可以直接链接到文档：


\:download:
----------------

此角色允许您链接到源树中的文件，这些文件不是可以查看的reST文档，而是可以下载的文件。

使用此角色时，引用的文件会在构建时自动标记为包含在输出中（显然，仅适用于HTML输出）。所有可下载的文件都放在_downloads输出目录的子目录中; 处理重复的文件名。

一个例子：::

    See :download:`this example script <../example.py>`.

给定的文件名通常是相对于当前源文件所包含的目录，但如果它是绝对的（以...开头/），则将其视为相对于顶部源目录。

该example.py文件将被复制到输出目录，并生成一个合适的链接。

要不显示不可用的下载链接，您应该包含具有此角色的整个段落：::

    .. only:: builder_html

        See :download:`this example script <../example.py>`.

**实例:**

:download:`mytxt </test/test.text>`

:download:`_downloadtxt <test.text>`

:download:`/sphinx标记结构/test.csv` 

\:numref:
----------------

\:envvar:
----------------

环境变量。生成索引条目。还会生成匹配envvar指令的链接（如果存在）。

..note::

    参考：http://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-envvar

\:token:
----------------

语法标记的名称（用于在productionlist指令之间创建链接 ）。

..note::

    参考：http://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-productionlist

\:keyword:
----------------

Python中关键字的名称。这将创建一个指向具有该名称的引用标签的链接（如果存在）。

\:option:
----------------

\:term:
----------------

\:math:
----------------

内联数学的作用。使用这样：

Since Pythagoras, we know that :math:\`a^2 + b^2 = c^2`.

\:eq:
----------------

与...相同math:numref。

\:abbr:
----------------

0.6版本的新功能。

缩写。如果角色内容包含带括号的说明，则将对其进行特殊处理：它将以HTML格式显示在工具提示中，并在LaTeX中仅输出一次。

示例：。:abbr:\`LIFO (last-in, first-out)`


\:command:
----------------

操作系统级命令的名称，例如rm。

\:file:
----------------

文件或目录的名称。在内容中，您可以使用花括号来表示“变量”部分，例如：

::

    ... is installed in :file:\`/usr/lib/python2.{x}/site-packages` ...

\:guilabel:
----------------

\:kbd:
----------------

\:mailheader:
----------------

RFC 822样式邮件头的名称。此标记并不意味着标题正在电子邮件消息中使用，但可用于引用相同“样式”的任何标题。这也用于各种MIME规范定义的标头。标题名称的输入方式应与通常在实践中找到的方式相同，并且在有多个常用用法的情况下首选camel-casing约定。例如：:mailheader:\`Content-Type`。

\:makevar:
----------------

make变量的名称。

\:manpage:
----------------

对Unix手册页的引用，包括例如 :manpage:\`ls(1)`。创建指向外部站点的超链接，如果manpages_url已定义，则呈现联机帮助页。

.. tip::

    manpage_url定义方法：http://www.sphinx-doc.org/en/master/usage/configuration.html#confval-manpages_url

\:menuselection:
----------------

\:mimetype:
----------------

MIME类型的名称，或MIME类型的组件（主要或次要部分，单独使用）。

\:newsgroup:
----------------

Usenet新闻组的名称。

\:program:
----------------

可执行程序的名称。这可能与某些平台的可执行文件的文件名不同。特别是，.exe对于Windows程序，应省略（或其他）扩展名。

\:regexp:
----------------

正则表达式。不应包括行情。

\:samp:
----------------

一段文字文本，例如代码。在内容中，您可以使用花括号来表示“变量”部分，如file。例如，在中，将强调该部分。:samp:\`print 1+{variable}`variable

如果您不需要“可变部分”指示，请改用标准 ``code``。

在1.8版中更改：允许使用反斜杠转义花括号

\:pep:
----------------

**成外部链接**

对Python Enhancement Proposal的引用。这会生成适当的索引条目。生成文本“PEP 编号 ”; 在HTML输出中，此文本是指向指定PEP的联机副本的超链接。您可以通过说明链接到特定部分:pep:\`number#anchor`。

\:rfc:
----------------

对Internet请求注释的引用。这会生成适当的索引条目。生成文本“RFC 编号 ”; 在HTML输出中，此文本是指向指定RFC的联机副本的超链接。您可以通过说明链接到特定部分:rfc:`number#anchor`。

.. note::

    请注意，成外部链接,包含超链接没有特殊角色，因为您可以使用标准reST标记来实现此目的。



