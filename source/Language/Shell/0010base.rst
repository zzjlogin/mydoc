.. _shell-base:

======================================================================================================================================================
Shell编程基础
======================================================================================================================================================

.. contents::

.. _shell_about:

Shell编程简介
======================================================================================================================================================

- 参考：

    - `Bash编程帮助1(英语文档)`_
    - `Bash编程帮助2(英语文档)`_    
    - `Bash编程帮助3(英语文档)`_

.. _Bash编程帮助1(英语文档): https://tiswww.case.edu/php/chet/bash/bashref.html
.. _Bash编程帮助2(英语文档): https://www.computerhope.com/unix/ubash.htm
.. _Bash编程帮助3(英语文档): https://linux.die.net/man/1/bash


shell编程是用shell提供的命令。

然后用合适的逻辑控制结构然后构成程序结构来执行这些linux/Unix命令。
所以shell编程本质是linux命令的使用。

.. note:: 但是shell编程并不是简单的把linux命令罗列在一个文件中执行这个文件。(虽然我们有时候经常这样做)

shell编程可以使得命令执行的逻辑更加清晰。而且通过shell程序中的逻辑控制异常处理。
可以有效的控制哪些命令执行，并且获取执行的结果及状态。
此外shell编程使得一些我们常用的功能可以通过把这个功能编写成函数，
从而得到了功能的复用。**总之就是：shell编程和linux命令的罗列既有相同又有不同**

.. note:: 本部分用的是bash。具体的shell有很多种。现在linux的流行使得bash基本是最广泛使用的shell了。

.. _shell_demo:

入门样例
======================================================================================================================================================

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 4-11
    :language: bash



.. _shell_stander:

Shell规范
======================================================================================================================================================

Shell规范的作用
------------------------------------------------------------------------------------------------------------------------------------------------------

    其实在我们日常使用中。总是或多或少的遵守一些自己的规范。
    这个规范也可以说是我们的习惯。
    但是在真正的shell编程开发中我们是用我们自己的规范(习惯)其他人
    很难理解。所以我们一般要遵守一些公认的或者内部协商好的规范。

.. rubric:: Shell规范包括：

1. 文件头规范；
2. 文件名规范；
3. 内部函数规范；
4. 变量名规范，等等。

Shell规范样例
------------------------------------------------------------------------------------------------------------------------------------------------------

个人觉得我们参考规范。应该参考一些现在实际应用的规范脚本。
然后参考这些规范的脚本学习他们然后总结模仿。(最后能不能超越就看个人能力了。)

:download:`规范样例crond </demo/program/shell/crond.sh>` :

.. tip::

    CentOS系统一般系统服务脚本都放在/etc/init.d/这个目录下。



.. _shell-cmd:

Shell基础语句
======================================================================================================================================================

.. _cmd-redirect:

重定向
------------------------------------------------------------------------------------------------------------------------------------------------------

.. note::
    重定向包括：>、>>、<、<<。
    - >：会覆盖原来文件的第一行。
    - >>：是追加到文件末尾。
    - <和<<和上面两个相同。


- 作用

    重定向可以把输出/输入的去向/来源进行改变。从而更好的控制程序执行。

.. hint::

    如果一个命令可以输出很多内容。而这些内容又都没有用不需要保存。
    这时候就需要重定向输出。把这个输出内容重定向到空。这样就不会因为占用空间而出现问题。

- 三个标准流

stdin
    标准输入流,文件描述符是0
stdout
    标准输出流,文件描述符是1
stderr
    标准错误流,文件描述符是2


**真正使用的时候一般是**

    #. 重定向stdout到一个文件
    #. 重定向stderr到一个文件
    #. 重定向stdout到stderr
    #. 重定向stderr到stdout
    #. 重定向stderr和stdout到一个文件
    #. 重定向stdout和stdout到stdout
    #. 重定向stdoutheelsstderr到stderr

- 重定向样例：

1. 重定向输出

重定向输出到文件

    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 15-27
        :language: bash

重定向输出到空

    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 31-32
        :language: bash

2. 重定向输入

    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 34-35
        :language: bash

------------------------------------------------------------------------------------------------------------------------------------------------------

.. _cmd-pipeline:

管道(|)
------------------------------------------------------------------------------------------------------------------------------------------------------

- 作用

    一个命令的输出需要交给下一个命令的输入的时候就需要管道来交接数据。

- 样例

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 37-38
    :language: bash

.. _cmd-var:

变量
------------------------------------------------------------------------------------------------------------------------------------------------------

.. rubric:: 变量分为：

- 自定义变量
- 环境变量
- 位置变量

.. _general-var:

自定义变量
......................................................................................................................................................

- 作用

    自定义变量就是和我们普通编程语言类似的变量。
    主要是用变量来代替一些脚本重复使用和方便修改的字符串。
    这些字符串一般都有一些特点。或者这个脚本经常使用
    或者这个字符串是我们常规使用经常用到的变量字符串。
    或者这个字符串很长而且在后面修改脚本时方便修改。

- 样例

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 40-46
    :language: bash


.. _path-var:

环境变量
......................................................................................................................................................

- 作用

    和windows系统的环境变量类似。默认PATH变量就是当前用户的环境变量。
    这个内容一般是一些路径字符串。这些路径保存了命令的二进制文件或者脚本文件。
    只有命令所在路径加入了环境变量。才能在任何路径下执行命令时不用输入路径名称。

.. tip::

    这个PATH路径从前向后依次匹配。所以如果有冲突的命令(即两个命令名字一样路径不同且命令文件所在路径都加入了PATH)。
    这时只输入命令名执行的是从前向后匹配PATH时的第一个匹配到路径的命令。
    系统可以通过`echo $PATH`和`echo $LANG`查看系统当前环境变量和语言字符集。

------------------------------------------------------------------------------------------------------------------------------------------------------

- 样例

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 48-55
    :language: bash

.. note::

    - 修改CentOS系统环境变量的方法如果只修改PATH的变量值只是临时生效。重启会失效
    - 修改字符集(默认语言)修改LANG也是只是临时生效。重启失效。
    - 可以参考： :ref:`sys-path-change`



.. _site-var:

位置变量
......................................................................................................................................................

- 作用

    位置变量就是在输入/输出/一些传输操作时的占位符。定位到哪个字符/哪个位置。

::

    $0: 命令本身
    $1: 对应的第1个参数
    $n：对应的第n个参数
    $*: 传递给脚本的所有参数，$*都看作一个整体
    $@：传递给脚本的所有参数，但是每个参数区别对待
    $#: 传递给脚本的参数个数
    $!: 后台运行最后一个进程号
    $?: 判断上一个命令，为0则为正确执行，非0则为错误(具体数，由命令决定) 
    $$: 当前进程号

------------------------------------------------------------------------------------------------------------------------------------------------------

- 样例

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 57-74
    :language: bash



------------------------------------------------------------------------------------------------------------------------------------------------------

.. _sys-path-change:

系统环境变量修改
......................................................................................................................................................

1. **修改系统字符集(默认语言)**

系统字符集定义的文件：`/etc/sysconfig/i18n`。

.. important::

    修改之前先做好源文件备份。这样方便出故障时恢复。

**修改过程：**

    1. 备份源文件
    
    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 77-78
        :language: bash

    2. 修改字符集定义文件
    
    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 81-82
        :language: bash

    3. 使定义文件立即生效
    
    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 85
        :language: bash

2. **修改系统环境变量**

下面是五个默认配置文件：

::

    三个对所有用户都有效
        /etc/profile
        /etc/profile.d/*.sh (所有以.sh结尾)
        /etc/bashrc
    两个对特定的用户有效(用户家目录下文件)
        ~/.bash_profile
        ~/.bashrc
    注销时生效的环境变量配置文件
        ~/.bash_logout
        ~/.bash_history

.. note::

    虽然这么多文件都能控制系统的环境变量。
    但是我们一般修改/etc/profile文件和/etc/bashrc(/etc/bashrc是添加命令别名的)
    添加命令别名方法类似下面的方法。只是在/etc/bashrc追加对应的别名命令即可。例如：
    echo "alias zzjlogin='ls -l'">> /etc/bashrc


**修改过程：**

    1. 备份源文件
    
    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 88
        :language: bash

    2. 修改字符集定义文件
    
    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 91-104
        :language: bash

    3. 使定义文件立即生效
    
    .. literalinclude:: /demo/program/shell/shell-demo.sh
        :linenos:
        :lines: 107
        :language: bash

.. _select-if:

分支(if)
------------------------------------------------------------------------------------------------------------------------------------------------------

.. rubric:: 分支语句语法：

參考比較時使用比較方法: :ref:`cmd-compare`

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 110-131

- 作用

控制Shell脚本执行的过程。并通过条件来控制哪些命令在哪些情况执行。
这样可以使shell脚本的逻辑更清楚。

- 样例

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 212-250
    :language: bash

.. _cmd-compare:

參考比较方法
------------------------------------------------------------------------------------------------------------------------------------------------------

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos:
    :lines: 135-208
    :language: bash

循环
------------------------------------------------------------------------------------------------------------------------------------------------------

for
......................................................................................................................................................

for的命令使用

.. code-block:: bash
    :linenos:
    :emphasize-lines: 2,3

    [root@centos6-zzjlogin ~]# help for
    for: for NAME [in WORDS ... ] ; do COMMANDS; done
        Execute commands for each member in a list.
        
        The 'for' loop executes a sequence of commands for each member in a
        list of items.  If `in WORDS ...;' is not present, then `in "$@"' is
        assumed.  For each element in WORDS, NAME is set to that element, and
        the COMMANDS are executed.
        
        Exit Status:
        Returns the status of the last command executed.
    for ((: for (( exp1; exp2; exp3 )); do COMMANDS; done
        Arithmetic for loop.
        
        Equivalent to
            (( EXP1 ))
            while (( EXP2 )); do
                COMMANDS
                (( EXP3 ))
            done
        EXP1, EXP2, and EXP3 are arithmetic expressions.  If any expression is
        omitted, it behaves as if it evaluates to 1.
        
        Exit Status:
        Returns the status of the last command executed.


bash风格： 

.. code-block:: bash
    :linenos:

    #!/bin/bash 
    declare -i sum=0
    for i in `seq 1 10` ; do 
        sum+=$i
    done
    echo $sum

.. attention:: 这个方案是bash风格的for语句，变量的引用都要使用$的。

c风格:

.. code-block:: bash
    :linenos:

    #!/bin/bash 
    declare -i sum=0
    for ((i=0; i<=10; i++)); do  
        sum+=i
    done
    echo $sum

.. attention:: 这个风格是c语句风格的，变量不需要$的。


常用实例：

循环制定次数(例如10)，输出指定内容：

.. code-block:: bash
    :linenos:

    [root@centos6 ~]# for((i=1;i<10;i++));do echo $i;done
    1
    2
    3
    4
    5
    6
    7
    8
    9

    [root@centos6 ~]# for i in `seq 1 10`;do echo $i;done                     
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10



while
......................................................................................................................................................

while的命令使用

.. code-block:: bash
    :linenos:
    :emphasize-lines: 2,3

    [root@centos6-zzjlogin ~]# help while
    while: while COMMANDS; do COMMANDS; done
        Execute commands as long as a test succeeds.
        
        Expand and execute COMMANDS as long as the final command in the
        'while' COMMANDS has an exit status of zero.
        
        Exit Status:
        Returns the status of the last command executed.



样例1： 

.. code-block:: bash
    :linenos:

    #!/bin/bash 
    declare -i sum=0
    declare -i i=0
    while [ $i -le 10 ]  ; do
            sum+=$i
            i=$[i+1]
    done
    echo $sum

样例2： 

.. code-block:: bash
    :linenos:

    [root@centos6-zzjlogin test]$ vim person.txt 
    [root@centos6-zzjlogin test]$ cat person.txt 
    zhaojiedi 23 
    liming 24
    xiaojia 18
    [root@centos6-zzjlogin test]$ cat while2.sh 
    #!/bin/bash 


    while read name age ; do 
        echo "name is $name, age is $age"
    done < person.txt
    [root@centos6-zzjlogin test]$ bash while2.sh 
    name is zhaojiedi, age is 23
    name is liming, age is 24
    name is xiaojia, age is 18

until
......................................................................................................................................................

until 的命令使用

.. code-block:: bash
    :linenos:

    [root@centos6-zzjlogin test]$ help until
    until: until COMMANDS; do COMMANDS; done

样例： 

.. code-block:: bash
    :linenos:

    #!/bin/bash 
    declare -i sum=0
    declare -i i=10
    until [ $i -lt 0 ]  ; do
            sum+=$i
            i=$[i-1]
    done
    echo $sum

.. attention:: while是判断条件为true才继续。而until相反。

case
......................................................................................................................................................

case的命令使用

.. code-block:: bash
    :linenos:

    [root@centos6-zzjlogin etc]$ help case
    case: case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac

样例： 

.. code-block:: bash
    :linenos:

    [root@centos6-zzjlogin test]$ cat case.sh 
    #!/bin/bash

    case $1 in 

    a|b|c)
        echo "you enter (a|b|c)" 
        ;;
    d|e|f)
        echo "you enter (d|e|f)" 
        ;;
    *)
        echo " other char"
        ;;
    esac

调用

.. code-block:: bash
    :linenos:

    [root@centos6-zzjlogin test]$ ./case.sh 2
    other char
    [root@centos6-zzjlogin test]$ ./case.sh a
    you enter (a|b|c)
    [root@centos6-zzjlogin test]$ ./case.sh d
    you enter (d|e|f)


select
......................................................................................................................................................

select的命令使用

.. code-block:: bash
    :linenos:

    [root@centos6-zzjlogin test]$ help select
    select: select NAME [in WORDS ... ;] do COMMANDS; done

样例： 

.. code-block:: bash
    :linenos:

    select c in yes no ; do
            echo " you enter is $c"
            case $c in
                    yes)
                            echo "yes";;
                    no)
                            echo "no";;
                    *)
                            echo "other";;
            esac
    done

.. attention:: select是不同与case的，内置有死循环的。


函数
------------------------------------------------------------------------------------------------------------------------------------------------------


函数样例
......................................................................................................................................................

.. code-block:: bash
    :linenos:

    #!/bin/bash 

    function my_sum(){
        local a=$1
        local b=$2
        echo $[a+b]
    }

    my_sum 2 4

.. warning:: bash中的中return返回的值只能是0-255，返回的是状态码。


接收函数返回结果
......................................................................................................................................................

.. code-block:: bash
    :linenos:

    #!/bin/bash 

    function my_sum(){
            local a=$1
            local b=$2
            echo $[a+b]
    }

    a=`my_sum 2 4`
    echo $a


接收函数返回的状态码
......................................................................................................................................................

.. code-block:: bash
    :linenos:

    #!/bin/bash

    function is_yes(){

            if [ "$1" == "yes" ] ; then
                    return 0
            else
                    return 1
            fi
    }

    is_yes "abc"
    echo $?
    is_yes "yes"
    echo $?

.. attention:: 在函数使用return去返回状态码只是终止了本函数堆栈调用，而exit是退出整个程序。




Shell調試
======================================================================================================================================================

通過下面命令可以顯示腳本的執行過程。這樣方便調試發現問題。

.. code-block:: bash
    :linenos:

    bash -x you_bash_file

读取输入使用read
------------------------------------------------------------------------------------------------------------------------------------------------------

.. code-block:: bash
    :linenos:

    [root@centos6-zzjlogin test]$ vim read.sh 
    [root@centos6-zzjlogin test]$ cat read.sh 
    #!/bin/bash 

    read -p "please input you age : " age 

    echo you age is $age
    [root@centos6-zzjlogin test]$ bash read.sh 
    please input you age : 25
    you age is 25

.. note:: read是可以一次接受多个输入的，也就是我们可以read a b 读取两个数分别赋给 a,b。


获取随机值
------------------------------------------------------------------------------------------------------------------------------------------------------

通常情况下`echo $?`返回码为0代表成功，其他都是失败，$?变量保存最近的命令退出状态。

.. code-block:: bash
    :linenos:

    echo $[RANDOM%50]









