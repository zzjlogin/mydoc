.. _pandas-preparations:

======================================================================================================================================================
pandas准备工作
======================================================================================================================================================



:Date: 2019-3

.. contents::

基本图形
======================================================================================================================================================

y轴太过稀疏的解决办法就是上述
plt.yticks(range(0,300,20))
-而x轴太密集我先找到一个倾斜，设置
plt.xticks(range(0,24,1),rotation=70)
设置横轴坐标字小些：
plt.xticks(range(0,24),rotation=70,fontsize=5)

饼状图
------------------------------------------------------------------------------------------------------------------------------------------------------

.. code-block:: python
    :linenos:

    import matplotlib.pyplot as plt
    labels='frogs','hogs','dogs','logs'
    sizes=15,20,45,10
    colors='yellowgreen','gold','lightskyblue','lightcoral'
    explode=0,0.1,0,0
    plt.pie(sizes,explode=explode,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True,startangle=50)
    plt.axis('equal')
    plt.show()

多个数据同一个图显示曲线图
------------------------------------------------------------------------------------------------------------------------------------------------------

.. code-block:: python
    :linenos:

    import numpy as np
    import matplotlib.pyplot as plt

    # evenly sampled time at 200ms intervals
    t = np.arange(0., 5., 0.2)

    # red dashes, blue squares and green triangles
    plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
    plt.show()

用DataFrame数据对象作为数据源显示：

.. code-block:: python
    :linenos:

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    data = {'series1':[1,3,4,3,5], 'series2':[2,4,5,2,4], 'series3':[5,4,4,1,5]}
    df = pd.DataFrame(data)
    x = np.arange(5)
    plt.axis([0,6,0,6])
    plt.plot(x,df)
    plt.legend(data, loc=0)
    plt.show()

折线图中标注在图右边显示：

.. code-block:: python
    :linenos:

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    data = np.random.randint(0,100,size=(10,3))
    df = pd.DataFrame(data,columns=list('ABC'))
    plt.plot(df['A'])
    plt.plot(df['B'])
    plt.plot(df['C'])
    plt.legend(['1','2','3'],loc=[1,0.5])
    plt.show()

折线图标注线，在图内适合的位置显示

.. code-block:: python
    :linenos:

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    data = np.random.randint(0,100,size=(10,3))
    df = pd.DataFrame(data,columns=list('ABC'))
    plt.plot(df['A'])
    plt.plot(df['B'])
    plt.plot(df['C'])
    plt.legend(ncol=3)
    plt.show()

折线图中标注横轴纵轴坐标名称和图名称

.. code-block:: python
    :linenos:

    plt.plot(x,y,label='折线图')
    plt.xlabel('x轴',fontsize=15)         #fontsize设置标签大小
    plt.ylabel('y轴',fontsize=15)
    plt.title('numpy简化加载数据过程')
    plt.legend()


柱状图添加文字说明
------------------------------------------------------------------------------------------------------------------------------------------------------

- plt.text()添加文字说明
- text()可以在图中的任意位置添加文字，并支持LaTex语法
- xlable(), ylable()用于添加x轴和y轴标签
- title()用于添加图的题目

.. code-block:: python
   :linenos:

    import numpy as np
    import matplotlib.pyplot as plt

    mu, sigma = 100, 15
    x = mu + sigma * np.random.randn(10000)

    # 数据的直方图
    n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)


    plt.xlabel('Smarts')
    plt.ylabel('Probability')
    #添加标题
    plt.title('Histogram of IQ')
    #添加文字
    plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
    plt.axis([40, 160, 0, 0.03])
    plt.grid(True)
    plt.show()

文本注释
------------------------------------------------------------------------------------------------------------------------------------------------------

.. code-block:: python
    :linenos:

    import numpy as np
    import matplotlib.pyplot as plt

    ax = plt.subplot(111)

    t = np.arange(0.0, 5.0, 0.01)
    s = np.cos(2*np.pi*t)
    line, = plt.plot(t, s, lw=2)

    plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5),
                arrowprops=dict(facecolor='black', shrink=0.05),
                )

    plt.ylim(-2,2)
    plt.show()


折线图中每个点特别显示
------------------------------------------------------------------------------------------------------------------------------------------------------

.. code-block:: python
    :linenos:

    import matplotlib.pyplot as plt
    # 月份
    x1 = ['2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08',
        '2017-09', '2017-10', '2017-11', '2017-12']
    # 体重
    y1 = [86, 85, 84, 80, 75, 70, 70, 74, 78, 70, 74, 80]
    # 设置画布大小
    plt.figure(figsize=(16, 4))
    # 标题
    plt.title("my weight")
    # 数据
    plt.plot(x1, y1, label='weight changes', linewidth=3, color='r', marker='o',
            markerfacecolor='blue', markersize=20)
    # 横坐标描述
    plt.xlabel('month')
    # 纵坐标描述
    plt.ylabel('weight')
    # 设置数字标签
    for a, b in zip(x1, y1):
        plt.text(a, b, b, ha='center', va='bottom', fontsize=20)
    plt.legend()
    plt.show()

一群点然后画出直线
------------------------------------------------------------------------------------------------------------------------------------------------------

.. code-block:: python
    :linenos:

    import pandas as pd
    import matplotlib.pyplot as plt
    plt.style.use('ggplot')
    from sklearn import datasets
    from sklearn import linear_model
    import numpy as np
    # Load data
    boston = datasets.load_boston()
    yb = boston.target.reshape(-1, 1)
    Xb = boston['data'][:,5].reshape(-1, 1)
    # Plot data
    plt.scatter(Xb,yb)
    plt.ylabel('value of house /1000 ($)')
    plt.xlabel('number of rooms')
    # Create linear regression object
    regr = linear_model.LinearRegression()
    # Train the model using the training sets
    regr.fit( Xb, yb)
    # Plot outputs
    plt.scatter(Xb, yb,  color='black')
    plt.plot(Xb, regr.predict(Xb), color='blue',
            linewidth=3)
    plt.show()