.. _shell-base:

====================
Shell编程基础
====================

.. contents::
.. section-numbering::

.. _shell-about:

Shell编程简介
====================
- 参考：

    - `Bash编程帮助1(英语文档)`_
    - `Bash编程帮助2(英语文档)`_    
    - `Bash编程帮助3(英语文档)`_

.. _Bash编程帮助1(英语文档): https://tiswww.case.edu/php/chet/bash/bashref.html
.. _Bash编程帮助2(英语文档): https://www.computerhope.com/unix/ubash.htm
.. _Bash编程帮助3(英语文档): https://linux.die.net/man/1/bash


shell编程是用shell提供的命令。
然后用合适的逻辑控制结构然后构成程序结构来执行这些linux/Unix命令。所以shell编程本质是linux命令的使用。

.. note:: 但是shell编程并不是简单的把linux命令罗列在一个文件中执行这个文件。(虽然我们有时候经常这样做)

shell编程可以使得命令执行的逻辑更加清晰。而且通过shell程序中的逻辑控制异常处理。
可以有效的控制哪些命令执行，并且获取执行的结果及状态。
此外shell编程使得一些我们常用的功能可以通过把这个功能编写成函数，
从而得到了功能的复用。**总之就是：shell编程和linux命令的罗列既有相同又有不同**

.. note:: 本部分用的是bash。具体的shell有很多种。现在linux的流行使得bash基本是最广泛使用的shell了。

.. _shell-demo:

入门样例
====================

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos: 4-11
    :language: bash

.. attention::

    本部分用的环境是CentOS6.6系统。默认bash。

.. _shell-stander:

Shell规范
====================

Shell规范的作用
--------------------

其实在我们日常使用中。总是或多或少的遵守一些自己的规范。
这个规范也可以说是我们的习惯。
但是在真正的shell编程开发中我们是用我们自己的规范(习惯)其他人
很难理解。所以我们一般要遵守一些公认的或者内部协商好的规范。

.. rubric:: Shell规范包括：

1. 文件头规范；
2. 文件名规范；
3. 内部函数规范；
4. 变量名规范，等等。

Shell规范样例
--------------------

个人觉得我们参考规范。应该参考一些现在实际应用的规范脚本。
然后参考这些规范的脚本学习他们然后总结模仿。(最后能不能超越就看个人能力了。)

:download:`规范样例crond </demo/program/shell/crond.sh>` :

.. tip::

    CentOS系统一般系统服务脚本都放在/etc/init.d/这个目录下。



.. _shell-cmd:

Shell基础语句
====================

.. _cmd-redirect:

重定向
--------------------

.. note::
    重定向包括：>、>>、<、<<。
    - >：会覆盖原来文件的第一行。
    - >>：是追加到文件末尾。
    - <和<<和上面两个相同。


- 作用

重定向可以把输出/输入的去向/来源进行改变。从而更好的控制程序执行。

.. hint::

    如果一个命令可以输出很多内容。而这些内容又都没有用不需要保存。
    这时候就需要重定向输出。把这个输出内容重定向到空。这样就不会因为占用空间而出现问题。

- 三个标准流

stdin
    标准输入流,文件描述符是0
stdout
    标准输出流,文件描述符是1
stderr
    标准错误流,文件描述符是2

.. rubirc:: 真正使用的时候一般是：

    #. 重定向stdout到一个文件
    #. 重定向stderr到一个文件
    #. 重定向stdout到stderr
    #. 重定向stderr到stdout
    #. 重定向stderr和stdout到一个文件
    #. 重定向stdout和stdout到stdout
    #. 重定向stdoutheelsstderr到stderr

- 重定向样例：

    #. 重定向输出

        - 重定向输出到文件

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos: 15-27
    :language: bash

        - 重定向输出到空

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos: 31-32
    :language: bash

    #. 重定向输入

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos: 34-35
    :language: bash

----

.. cmd-pipeline::

管道(|)
--------------------

- 作用

    一个命令的输出需要交给下一个命令的输入的时候就需要管道来交接数据。

- 样例

.. literalinclude:: /demo/program/shell/shell-demo.sh
    :linenos: 37-38
    :language: bash

.. cmd-var::

变量
--------------------

.. rubirc:: 变量分为：

- 普通变量
- 环境变量
- 位置变量

.. general-var::

普通变量
....................

- 作用

    |普通变量就是和我们普通编程语言类似的变量。
    |主要是用变量来代替一些脚本重复使用和方便修改的字符串。
    |这些字符串一般都有一些特点。或者这个脚本经常使用
    |或者这个字符串是我们常规使用经常用到的变量字符串。
    |或者这个字符串很长而且在后面修改脚本时方便修改。

- 样例

.. path-var::

环境变量
....................

- 作用

    |和windows系统的环境变量类似。默认PATH变量就是当前用户的环境变量。
    |这个内容一般是一些路径字符串。这些路径保存了命令的二进制文件或者脚本文件。
    |只有命令所在路径加入了环境变量。才能在任何路径下执行命令时不用输入路径名称。

.. tip::

    这个PATH路径从前向后依次匹配。所以如果有冲突的命令(即两个命令名字一样路径不同且命令文件所在路径都加入了PATH)。
    这时只输入命令名执行的是从前向后匹配PATH时的第一个匹配到路径的命令。

- 样例


.. site-var::

位置变量
....................

- 作用

位置变量就是在输入/输出/一些传输操作时的占位符。定位到哪个字符/哪个位置。

::

    $0: 命令本身
    $1: 对应的第1个参数
    $n：对应的第n个参数
    $*: 传递给脚本的所有参数
    $@：传递给脚本的所有参数
    $#: 传递给脚本的参数个数

- 样例


